name: Django Tests

on:
  workflow_run:
    workflows: ["Lint"]
    types:
      - completed
    branches: [ master]

env:
  PYTHON_VERSION: '3.13'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.otputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependnecies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev

      - name: Run Tests with coverage
        run: |
          cd booking_app
          poetry run coverage run manage.py test
          poetry run coverage report -m 
          poetry run coverage xml
          poetry run coverage html
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-html-report
          path: htmlcov/ # TODO check path.
          retention-days: 30


      - name: Test summary
        if: always()
        run: |
          if [ -f coverage.xml ]; then
            echo "Tests completed with coverage report"
          else
            echo "Tests failed or coverage report not generated"
          fi
        
